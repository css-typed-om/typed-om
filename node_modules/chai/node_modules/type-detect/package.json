{
  "name": "type-detect",
  "version": "1.0.0",
  "description": "Improved typeof detection for node.js and the browser.",
  "author": {
    "name": "Jake Luer",
    "email": "jake@alogicalparadox.com",
    "url": "http://alogicalparadox.com"
  },
  "license": "MIT",
  "keywords": [],
  "repository": {
    "type": "git",
    "url": "git@github.com:chaijs/type-detect.git"
  },
  "engines": {
    "node": "*"
  },
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {},
  "devDependencies": {
    "component": "*",
    "coveralls": "2.0.16",
    "jscoverage": "0.3.7",
    "mocha": "*",
    "mocha-lcov-reporter": "0.0.1",
    "mocha-phantomjs": "*",
    "simple-assert": "*"
  },
  "readme": "# type-detect [![Build Status](https://travis-ci.org/chaijs/type-detect.png?branch=master)](https://travis-ci.org/chaijs/type-detect) [![Coverage Status](https://coveralls.io/repos/chaijs/type-detect/badge.png?branch=master)](https://coveralls.io/r/chaijs/type-detect?branch=master)\n\n> Improved typeof detection for node.js and the browser.\n\n## Installation\n\n### Node.js\n\n`type-detect` is available on [npm](http://npmjs.org).\n\n    $ npm install type-detect\n\n### Component\n\n`type-detect` is available as a [component](https://github.com/component/component).\n\n    $ component install chaijs/type-detect\n\n## Usage\n\n### Primary\n\nThe primary export of `type-detect` is function that can server as a replacement for \n`typeof`. The results of this function will be more specific than that of native `typeof`.\n\n```js\nvar type = require('type-detect');\n```\n\n#### array\n\n```js\nassert(type([]) === 'array');\nassert(type(new Array()) === 'array');\n```\n\n#### regexp\n\n```js\nassert(type(/a-z/gi) === 'regexp');\nassert(type(new RegExp('a-z')) === 'regexp');\n```\n\n#### function\n\n```js\nassert(type(function () {}) === 'function');\n```\n\n#### arguments\n\n```js\n(function () {\n  assert(type(arguments) === 'arguments');\n})();\n```\n\n#### date\n\n```js\nassert(type(new Date) === 'date');\n```\n\n#### number\n\n```js\nassert(type(1) === 'number');\nassert(type(1.234) === 'number');\nassert(type(-1) === 'number');\nassert(type(-1.234) === 'number');\nassert(type(Infinity) === 'number');\nassert(type(NaN) === 'number');\nassert(type(new Number(1)) === 'number');\n```\n\n#### string\n\n```js\nassert(type('hello world') === 'string');\nassert(type(new String('hello')) === 'string');\n```\n\n#### null\n\n```js\nassert(type(null) === 'null');\nassert(type(undefined) !== 'null');\n```\n\n#### undefined\n\n```js\nassert(type(undefined) === 'undefined');\nassert(type(null) !== 'undefined');\n```\n\n#### object\n\n```js\nvar Noop = function () {};\nassert(type({}) === 'object');\nassert(type(Noop) !== 'object');\nassert(type(new Noop) === 'object');\nassert(type(new Object) === 'object');\n```\n\n#### ECMA6 Types\n\nSupports all ECMA6 Types:\n\n```js\nassert(type(new Map() === 'map');\nassert(type(new WeakMap()) === 'weakmap');\nassert(type(new Set()) === 'set');\nassert(type(new WeakSet()) === 'weakset');\nassert(type(Symbol()) === 'symbol');\nassert(type(new Promise(callback) === 'promise');\nassert(type(new Int8Array()) === 'int8array');\nassert(type(new Uint8Array()) === 'uint8array');\nassert(type(new UInt8ClampedArray()) === 'uint8clampedarray');\nassert(type(new Int16Array()) === 'int16array');\nassert(type(new Uint16Array()) === 'uint16array');\nassert(type(new Int32Array()) === 'int32array');\nassert(type(new UInt32Array()) === 'uint32array');\nassert(type(new Float32Array()) === 'float32array');\nassert(type(new Float64Array()) === 'float64array');\nassert(type(new ArrayBuffer()) === 'arraybuffer');\nassert(type(new DataView(arrayBuffer)) === 'dataview');\n```\n\nIf you use `Symbol.toStringTag` to change an Objects return value of the `toString()` Method, `type()` will return this value, e.g:\n\n```js\nvar myObject = {};\nmyObject[Symbol.toStringTag] = 'myCustomType';\nassert(type(myObject) === 'myCustomType');\n```\n\n### Library\n\nA `Library` is a small constructed repository for custom type detections.\n\n```js\nvar lib = new type.Library;\n```\n\n#### .of (obj)\n\n* **@param** _{Mixed}_ object to test\n* **@return** _{String}_  type\n\nExpose replacement `typeof` detection to the library.\n\n```js\nif (lib.of('hello world') === 'string') {\n  // ...\n}\n```\n\n\n#### .define (type, test)\n\n* **@param** _{String}_ type \n* **@param** _{RegExp|Function}_ test \n\nAdd a test to for the `.test()` assertion.\n\nCan be defined as a regular expression:\n\n```js\nlib.define('int', /^[0-9]+$/);\n```\n\n... or as a function:\n\n```js\nlib.define('bln', function (obj) {\n  if (lib.of(obj) === 'boolean') return true;\n  var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n  if (lib.of(obj) === 'string') obj = obj.toLowerCase();\n  return !! ~blns.indexOf(obj);\n});\n```\n\n\n#### .test (obj, test)\n\n* **@param** _{Mixed}_ object \n* **@param** _{String}_ type \n* **@return** _{Boolean}_  result\n\nAssert that an object is of type. Will first\ncheck natives, and if that does not pass it will\nuse the user defined custom tests.\n\n```js\nassert(lib.test('1', 'int'));\nassert(lib.test('yes', 'bln'));\n```\n\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jake Luer <jake@alogicalparadox.com> (http://alogicalparadox.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chaijs/type-detect/issues"
  },
  "_id": "type-detect@1.0.0",
  "dist": {
    "shasum": "f070d4f900255511194d217db2cee1909660f825"
  },
  "_from": "type-detect@^1.0.0",
  "_resolved": "https://registry.npmjs.org/type-detect/-/type-detect-1.0.0.tgz"
}
